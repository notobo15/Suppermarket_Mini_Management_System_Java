package GUI;

import BUS.BUS_Account;
import DAO.DAO_Account;
import DTO.DTO_Account;
import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.FlatLightLaf;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import jxl.write.WritableSheet;
import org.apache.poi.ss.usermodel.Cell;
import static org.apache.poi.ss.usermodel.CellType.BLANK;
import static org.apache.poi.ss.usermodel.CellType.BOOLEAN;
import static org.apache.poi.ss.usermodel.CellType.ERROR;
import static org.apache.poi.ss.usermodel.CellType.FORMULA;
import static org.apache.poi.ss.usermodel.CellType.NUMERIC;
import static org.apache.poi.ss.usermodel.CellType.STRING;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;

/**
 *
 * @author notobo
 */
public class TestExportImoprtExcel extends javax.swing.JFrame {

    /**
     * Creates new form Table
     */
    public TestExportImoprtExcel() throws SQLException {
        initComponents();
        addRowToJTable();
    }

    public void addRowToJTable() throws SQLException {
        DAO.DAO_Account dao_acc = new DAO_Account();
        ArrayList<DTO.DTO_Account> list = dao_acc.findAll();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Object rowData[] = new Object[7];

        for (int i = 0; i < list.size(); i++) {
            rowData[0] = list.get(i).getAccountId();
            rowData[1] = list.get(i).getAccountName();
            rowData[2] = list.get(i).getPasssword();
            rowData[3] = list.get(i).getGender();
            rowData[4] = list.get(i).getFirstName();
            rowData[5] = list.get(i).getLastName();
            rowData[6] = list.get(i).getAddress();
            model.addRow(rowData);
        }

    }

    public static void main(String[] args) throws SQLException, UnsupportedLookAndFeelException {
        UIManager.setLookAndFeel(new FlatLightLaf());
        new TestExportImoprtExcel().setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 700));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "ten account", "password", "gioi tinh", "ho", "ten", "dia chi"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Xuat Excel");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Import from Excel");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(80, 80, 80))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked

        try {
            JFileChooser jfile = new JFileChooser();
            jfile.setSelectedFile(new File("untitled.xls"));

            int seleted = jfile.showSaveDialog(this);

            if (seleted == JFileChooser.APPROVE_OPTION) {
                String FilePath = jfile.getSelectedFile().getPath();
                System.out.println(FilePath);

                HSSFWorkbook workbook = new HSSFWorkbook();
                HSSFSheet sheet = workbook.createSheet("account");
                BUS_Account bus_account = new BUS_Account();
                ArrayList<DTO_Account> list = bus_account.getList();
                int rowPos = 0;
                HSSFRow row = sheet.createRow(rowPos);
                row.createCell(0, CellType.NUMERIC).setCellValue("id");
                row.createCell(1, CellType.STRING).setCellValue("ten");
                row.createCell(2, CellType.STRING).setCellValue("password");
                row.createCell(3, CellType.STRING).setCellValue("gioi tinh");
                row.createCell(4, CellType.STRING).setCellValue("ho");
                row.createCell(5, CellType.STRING).setCellValue("ten");
                row.createCell(6, CellType.STRING).setCellValue("dia chi");

                for (int i = 0; i < list.size(); i++) {
                    rowPos++;
                    row = sheet.createRow(rowPos);
                    row.createCell(0, CellType.NUMERIC).setCellValue(list.get(i).getAccountId());
                    row.createCell(1, CellType.STRING).setCellValue(list.get(i).getAccountName());
                    row.createCell(2, CellType.STRING).setCellValue(list.get(i).getPasssword());
                    row.createCell(3, CellType.STRING).setCellValue(list.get(i).getGender());
                    row.createCell(4, CellType.STRING).setCellValue(list.get(i).getLastName());
                    row.createCell(5, CellType.STRING).setCellValue(list.get(i).getFirstName());
                    row.createCell(6, CellType.STRING).setCellValue(list.get(i).getAddress());
                }

                File file = new File(FilePath);
                try {
                    FileOutputStream fos = new FileOutputStream(file);
                    workbook.write(fos);
                    fos.close();

                } catch (Exception e) {
                    System.out.println("GUI.Table.jButton1MouseClicked()");
                }

            }
            if (seleted == JFileChooser.CANCEL_OPTION) {
            }

        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked

        try {

            JFileChooser jfile = new JFileChooser();
            jfile.setFileFilter(new FileFilter() {

                public String getDescription() {
                    return "File Excel (*.xls)";
                }

                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    } else {
                        String filename = f.getName().toLowerCase();
                        return filename.endsWith(".xls");
                    }
                }
            });
            int seleted = jfile.showOpenDialog(this);
            if (seleted == JFileChooser.APPROVE_OPTION) {
                String FilePath = jfile.getSelectedFile().getPath();

                FileInputStream fis = new FileInputStream(new File(FilePath));
                HSSFWorkbook workbook = new HSSFWorkbook(fis);
                HSSFSheet sheet = workbook.getSheetAt(0);
                sheet.setRowBreak(0);
                FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                while (model.getRowCount() > 0) {
                    model.removeRow(0);
                }
                int i = 0;
                ArrayList<DTO_Account> list = null;
                for (Row row : sheet) {
                    DTO_Account acc = new DTO_Account();
                    if (i > 0) {
                        ArrayList<String> item = new ArrayList<String>();
                        for (Cell cell : row) {

                            switch (evaluator.evaluateInCell(cell).getCellType()) {
                                case BOOLEAN:
//                                System.out.println(cell.getBooleanCellValue());
                                    break;
                                case NUMERIC:
                                    item.add("" + cell.getNumericCellValue());
//                                System.out.println(cell.getNumericCellValue());
                                    break;
                                case STRING:
//                                System.out.println(cell.getStringCellValue());
                                    item.add("" + cell.getStringCellValue());
                                    break;
                                case BLANK:
                                    break;
                                case ERROR:
//                                System.out.println(cell.getErrorCellValue());
                                    break;

                                case FORMULA:
                                    break;
                            }

                        }
                        Object rowData[] = new Object[7];
                        System.out.println(item.get(0));
                        rowData[0] = item.get(0);
                        rowData[1] = item.get(1);
                        rowData[2] = item.get(2);
                        rowData[3] = item.get(3);
                        rowData[4] = item.get(4);
                        rowData[5] = item.get(5);
                        rowData[6] = item.get(6);
                        model.addRow(rowData);

                    }

                    i++;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton2MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void add(String volvo) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
